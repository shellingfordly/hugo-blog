<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on ShellingfordLY</title>
    <link>http://shellingfordly.github.io/node.js/</link>
    <description>Recent content in Node.js on ShellingfordLY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Sep 2019 11:41:26 +0800</lastBuildDate>
    
	<atom:link href="http://shellingfordly.github.io/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nodo初级</title>
      <link>http://shellingfordly.github.io/node.js/nodo%E5%88%9D%E7%BA%A7/</link>
      <pubDate>Thu, 26 Sep 2019 11:41:26 +0800</pubDate>
      
      <guid>http://shellingfordly.github.io/node.js/nodo%E5%88%9D%E7%BA%A7/</guid>
      <description>第一章 认识node.js 一、了解node.js  node.js使用了一个事件驱动、非阻塞式I/O的模型，使其轻量又高效。
  I/O密集 CPU密集   BS 浏览器和后端 CS 客户端和后端
 二、学习node 1. 引用require  缓存：在同一个模块中，第一次引入一个模块时，会有缓存；第二次引用时不会再去调用模块，而是直接使用第一次调用过的模块  2. 输出exports  最终输出的是module.exports 而exports和module.exports是引用关系 exports指向module.exports   导入模块输出的数据 . 添加属性时使用exports  而直接赋值时使用module.exports
 exports.a = &amp;quot;ly&amp;quot; exports = function(){} //直接赋值则改变了exports指向，此时得不到exports的值   模块化编程：不污染全局变量，
 //这是01.js文件 //require函数的返回值就是exports对象 let a = require(&amp;quot;./02.js&amp;quot;) console.log(a) //运行结果：{n:&amp;quot;刘谣&amp;quot;}  //这是02.js let n = &amp;quot;刘谣&amp;quot; exports.n = n  三、原生模块 1. 模块引用  原生模块优先 不写路径时默认在node原生模块中找 默认找node_modules里的某个模块中的index.</description>
    </item>
    
  </channel>
</rss>